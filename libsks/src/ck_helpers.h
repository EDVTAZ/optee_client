/*
 * Copyright (c) 2017-2018, Linaro Limited
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */

#ifndef __HELPERS_CK_H
#define __HELPERS_CK_H

#include <pkcs11.h>
#include <stdint.h>
#include <stddef.h>
#include <sks_ta.h>
#include <tee_client_api.h>

/*
 * SKS reserves vendor ID 0xffffffff to represent an invalid ID
 * (attribute class, type, ...)
 */
#define CK_VENDOR_INVALID_ID		0xffffffff

/* Short aliases for most used SKS retrun codes */
#define SKS_OK			SKS_CKR_OK
#define SKS_ERROR		SKS_CKR_GENERAL_ERROR
#define SKS_MEMORY		SKS_CKR_DEVICE_MEMORY
#define SKS_BAD_PARAM		SKS_CKR_ARGUMENT_BAD
#define SKS_SHORT_BUFFER	SKS_CKR_BUFFER_TOO_SMALL
#define SKS_FAILED		SKS_CKR_FUNCTION_FAILED

/*
 * Various conversion between PKCS#11 IDs and SKS IDs
 */

/* sks-to-ck only: this is not a one-to-one relationship */
#define CK_SKS_ERROR_CODES \
	CK_SKS_ID(CKR_OK,			SKS_CKR_OK) \
	CK_SKS_ID(CKR_GENERAL_ERROR,		SKS_CKR_GENERAL_ERROR) \
	CK_SKS_ID(CKR_DEVICE_MEMORY,		SKS_CKR_DEVICE_MEMORY) \
	CK_SKS_ID(CKR_ARGUMENTS_BAD,		SKS_CKR_ARGUMENT_BAD) \
	CK_SKS_ID(CKR_BUFFER_TOO_SMALL,		SKS_CKR_BUFFER_TOO_SMALL) \
	CK_SKS_ID(CKR_FUNCTION_FAILED,		SKS_CKR_FUNCTION_FAILED) \
	CK_SKS_ID(CKR_GENERAL_ERROR,		SKS_NOT_FOUND)	/* No Cryptoki equivalent */ \
	CK_SKS_ID(CKR_ATTRIBUTE_TYPE_INVALID,	SKS_CKR_ATTRIBUTE_TYPE_INVALID) \
	CK_SKS_ID(CKR_ATTRIBUTE_VALUE_INVALID,	SKS_CKR_ATTRIBUTE_VALUE_INVALID) \
	CK_SKS_ID(CKR_OBJECT_HANDLE_INVALID,	SKS_CKR_OBJECT_HANDLE_INVALID) \
	CK_SKS_ID(CKR_KEY_HANDLE_INVALID,	SKS_CKR_KEY_HANDLE_INVALID) \
	CK_SKS_ID(CKR_MECHANISM_INVALID,	SKS_CKR_MECHANISM_INVALID) \
	CK_SKS_ID(CKR_SLOT_ID_INVALID,		SKS_CKR_SLOT_ID_INVALID) \
	CK_SKS_ID(CKR_SESSION_HANDLE_INVALID,	SKS_CKR_SESSION_HANDLE_INVALID) \
	CK_SKS_ID(CKR_PIN_INCORRECT,		SKS_CKR_PIN_INCORRECT) \
	CK_SKS_ID(CKR_PIN_LOCKED,		SKS_CKR_PIN_LOCKED) \
	CK_SKS_ID(CKR_PIN_EXPIRED,		SKS_CKR_PIN_EXPIRED) \
	CK_SKS_ID(CKR_PIN_INVALID,		SKS_CKR_PIN_INVALID) \
	CK_SKS_ID(CKR_OPERATION_ACTIVE,		SKS_CKR_OPERATION_ACTIVE) \
	CK_SKS_ID(CKR_KEY_FUNCTION_NOT_PERMITTED, SKS_CKR_KEY_FUNCTION_NOT_PERMITTED) \
	CK_SKS_ID(CKR_OPERATION_NOT_INITIALIZED, SKS_CKR_OPERATION_NOT_INITIALIZED) \
	CK_SKS_ID(CKR_SESSION_READ_ONLY,	SKS_CKR_SESSION_READ_ONLY) \
	CK_SKS_ID(CKR_MECHANISM_PARAM_INVALID,	SKS_CKR_MECHANISM_PARAM_INVALID) \
	CK_SKS_ID(CK_VENDOR_INVALID_ID,		SKS_UNDEFINED_ID)

#define CK_SKS_SLOT_FLAG_MASKS \
	CK_SKS_ID(CKF_TOKEN_PRESENT,		SKS_CKFS_TOKEN_PRESENT) \
	CK_SKS_ID(CKF_REMOVABLE_DEVICE,		SKS_CKFS_REMOVABLE_DEVICE) \
	CK_SKS_ID(CKF_HW_SLOT,			SKS_CKFS_HW_SLOT)

#define CK_SKS_TOKEN_FLAG_MASKS \
	CK_SKS_ID(CKF_RNG,				SKS_CKFT_RNG) \
	CK_SKS_ID(CKF_WRITE_PROTECTED,			SKS_CKFT_WRITE_PROTECTED) \
	CK_SKS_ID(CKF_LOGIN_REQUIRED,			SKS_CKFT_LOGIN_REQUIRED) \
	CK_SKS_ID(CKF_USER_PIN_INITIALIZED,		SKS_CKFT_USER_PIN_INITIALIZED) \
	CK_SKS_ID(CKF_RESTORE_KEY_NOT_NEEDED,		SKS_CKFT_RESTORE_KEY_NOT_NEEDED) \
	CK_SKS_ID(CKF_CLOCK_ON_TOKEN,			SKS_CKFT_CLOCK_ON_TOKEN) \
	CK_SKS_ID(CKF_PROTECTED_AUTHENTICATION_PATH,	SKS_CKFT_PROTECTED_AUTHENTICATION_PATH) \
	CK_SKS_ID(CKF_DUAL_CRYPTO_OPERATIONS,		SKS_CKFT_DUAL_CRYPTO_OPERATIONS) \
	CK_SKS_ID(CKF_TOKEN_INITIALIZED,		SKS_CKFT_TOKEN_INITIALIZED) \
	CK_SKS_ID(CKF_USER_PIN_COUNT_LOW,		SKS_CKFT_USER_PIN_COUNT_LOW) \
	CK_SKS_ID(CKF_USER_PIN_FINAL_TRY,		SKS_CKFT_USER_PIN_FINAL_TRY) \
	CK_SKS_ID(CKF_USER_PIN_LOCKED,			SKS_CKFT_USER_PIN_LOCKED) \
	CK_SKS_ID(CKF_USER_PIN_TO_BE_CHANGED,		SKS_CKFT_USER_PIN_TO_BE_CHANGED) \
	CK_SKS_ID(CKF_SO_PIN_COUNT_LOW,			SKS_CKFT_SO_PIN_COUNT_LOW) \
	CK_SKS_ID(CKF_SO_PIN_FINAL_TRY,			SKS_CKFT_SO_PIN_FINAL_TRY) \
	CK_SKS_ID(CKF_SO_PIN_LOCKED,			SKS_CKFT_SO_PIN_LOCKED) \
	CK_SKS_ID(CKF_SO_PIN_TO_BE_CHANGED,		SKS_CKFT_SO_PIN_TO_BE_CHANGED) \
	CK_SKS_ID(CKF_ERROR_STATE,			SKS_CKFT_ERROR_STATE)

#define CK_SKS_MECHANISM_FLAG_IDS \
	CK_SKS_ID(CKF_HW,			SKS_CKFM_HW) \
	CK_SKS_ID(CKF_ENCRYPT,			SKS_CKFM_ENCRYPT) \
	CK_SKS_ID(CKF_DECRYPT,			SKS_CKFM_DECRYPT) \
	CK_SKS_ID(CKF_DIGEST,			SKS_CKFM_DIGEST) \
	CK_SKS_ID(CKF_SIGN,			SKS_CKFM_SIGN) \
	CK_SKS_ID(CKF_SIGN_RECOVER,		SKS_CKFM_SIGN_RECOVER) \
	CK_SKS_ID(CKF_VERIFY,			SKS_CKFM_VERIFY) \
	CK_SKS_ID(CKF_VERIFY_RECOVER,		SKS_CKFM_VERIFY_RECOVER) \
	CK_SKS_ID(CKF_GENERATE,			SKS_CKFM_GENERATE) \
	CK_SKS_ID(CKF_GENERATE_KEY_PAIR,	SKS_CKFM_GENERATE_PAIR) \
	CK_SKS_ID(CKF_WRAP,			SKS_CKFM_WRAP) \
	CK_SKS_ID(CKF_UNWRAP,			SKS_CKFM_UNWRAP) \
	CK_SKS_ID(CKF_DERIVE,			SKS_CKFM_DERIVE)

#define CK_SKS_PROCESSING_IDS \
	CK_SKS_ID(CKM_AES_ECB,			SKS_CKM_AES_ECB) \
	CK_SKS_ID(CKM_AES_CBC,			SKS_CKM_AES_CBC) \
	CK_SKS_ID(CKM_AES_CBC_PAD,		SKS_CKM_AES_CBC_PAD) \
	CK_SKS_ID(CKM_AES_CTR,			SKS_CKM_AES_CTR) \
	CK_SKS_ID(CKM_AES_GCM,			SKS_CKM_AES_GCM) \
	CK_SKS_ID(CKM_AES_CCM,			SKS_CKM_AES_CCM) \
	CK_SKS_ID(CKM_AES_CTS,			SKS_CKM_AES_CTS) \
	CK_SKS_ID(CKM_AES_GMAC,			SKS_CKM_AES_GMAC) \
	CK_SKS_ID(CKM_AES_CMAC,			SKS_CKM_AES_CMAC) \
	CK_SKS_ID(CKM_AES_CMAC_GENERAL,		SKS_CKM_AES_CMAC_GENERAL) \
	CK_SKS_ID(CKM_AES_ECB_ENCRYPT_DATA,	SKS_CKM_AES_ECB_ENCRYPT_DATA) \
	CK_SKS_ID(CKM_AES_CBC_ENCRYPT_DATA,	SKS_CKM_AES_CBC_ENCRYPT_DATA) \
	CK_SKS_ID(CKM_AES_KEY_GEN,		SKS_CKM_AES_KEY_GEN) \
	CK_SKS_ID(CKM_GENERIC_SECRET_KEY_GEN,	SKS_CKM_GENERIC_SECRET_KEY_GEN) \
	CK_SKS_ID(CK_VENDOR_INVALID_ID,		SKS_UNDEFINED_ID) \
	CK_SKS_ID(CKM_MD5_HMAC,			SKS_CKM_MD5_HMAC) \
	CK_SKS_ID(CKM_SHA_1_HMAC,		SKS_CKM_SHA_1_HMAC) \
	CK_SKS_ID(CKM_SHA224_HMAC,		SKS_CKM_SHA224_HMAC) \
	CK_SKS_ID(CKM_SHA256_HMAC,		SKS_CKM_SHA256_HMAC) \
	CK_SKS_ID(CKM_SHA384_HMAC,		SKS_CKM_SHA384_HMAC) \
	CK_SKS_ID(CKM_SHA512_HMAC,		SKS_CKM_SHA512_HMAC) \
	CK_SKS_ID(CKM_AES_XCBC_MAC,		SKS_CKM_AES_XCBC_MAC) \
	/* the end */

#define CK_SKS_ATTRIBS_ID \
	CK_SKS_ID(CKA_CLASS,			SKS_CKA_CLASS) \
	CK_SKS_ID(CKA_KEY_TYPE,			SKS_CKA_KEY_TYPE) \
	CK_SKS_ID(CKA_VALUE,			SKS_CKA_VALUE) \
	CK_SKS_ID(CKA_VALUE_LEN,		SKS_CKA_VALUE_LEN) \
	CK_SKS_ID(CKA_WRAP_TEMPLATE,		SKS_CKA_WRAP_TEMPLATE) \
	CK_SKS_ID(CKA_UNWRAP_TEMPLATE,		SKS_CKA_UNWRAP_TEMPLATE) \
	CK_SKS_ID(CKA_DERIVE_TEMPLATE,		SKS_CKA_DERIVE_TEMPLATE) \
	CK_SKS_ID(CKA_START_DATE,		SKS_CKA_START_DATE) \
	CK_SKS_ID(CKA_END_DATE,			SKS_CKA_END_DATE) \
	CK_SKS_ID(CKA_OBJECT_ID,		SKS_CKA_OBJECT_ID) \
	CK_SKS_ID(CKA_APPLICATION,		SKS_CKA_APPLICATION) \
	CK_SKS_ID(CKA_MECHANISM_TYPE,		SKS_CKA_MECHANISM_TYPE) \
	CK_SKS_ID(CKA_ID,			SKS_CKA_ID) \
	CK_SKS_ID(CKA_ALLOWED_MECHANISMS,	SKS_CKA_ALLOWED_MECHANISMS) \
	/* Below are boolean attributes */\
	CK_SKS_ID(CKA_TOKEN,			SKS_CKA_TOKEN) \
	CK_SKS_ID(CKA_PRIVATE,			SKS_CKA_PRIVATE) \
	CK_SKS_ID(CKA_TRUSTED,			SKS_CKA_TRUSTED) \
	CK_SKS_ID(CKA_SENSITIVE,		SKS_CKA_SENSITIVE) \
	CK_SKS_ID(CKA_ENCRYPT,			SKS_CKA_ENCRYPT) \
	CK_SKS_ID(CKA_DECRYPT,			SKS_CKA_DECRYPT) \
	CK_SKS_ID(CKA_WRAP,			SKS_CKA_WRAP) \
	CK_SKS_ID(CKA_UNWRAP,			SKS_CKA_UNWRAP) \
	CK_SKS_ID(CKA_SIGN,			SKS_CKA_SIGN) \
	CK_SKS_ID(CKA_SIGN_RECOVER,		SKS_CKA_SIGN_RECOVER) \
	CK_SKS_ID(CKA_VERIFY,			SKS_CKA_VERIFY) \
	CK_SKS_ID(CKA_VERIFY_RECOVER,		SKS_CKA_VERIFY_RECOVER) \
	CK_SKS_ID(CKA_DERIVE,			SKS_CKA_DERIVE) \
	CK_SKS_ID(CKA_EXTRACTABLE,		SKS_CKA_EXTRACTABLE) \
	CK_SKS_ID(CKA_LOCAL,			SKS_CKA_LOCAL) \
	CK_SKS_ID(CKA_NEVER_EXTRACTABLE,	SKS_CKA_NEVER_EXTRACTABLE) \
	CK_SKS_ID(CKA_ALWAYS_SENSITIVE,		SKS_CKA_ALWAYS_SENSITIVE) \
	CK_SKS_ID(CKA_MODIFIABLE,		SKS_CKA_MODIFIABLE) \
	CK_SKS_ID(CKA_COPYABLE,			SKS_CKA_COPYABLE) \
	CK_SKS_ID(CKA_DESTROYABLE,		SKS_CKA_DESTROYABLE) \
	CK_SKS_ID(CKA_ALWAYS_AUTHENTICATE,	SKS_CKA_ALWAYS_AUTHENTICATE) \
	CK_SKS_ID(CKA_WRAP_WITH_TRUSTED,	SKS_CKA_WRAP_WITH_TRUSTED) \
	/* Specifc SKS attribute IDs */ \
	CK_SKS_ID(CK_VENDOR_INVALID_ID,		SKS_UNDEFINED_ID)

#define CK_SKS_OBJECT_CLASS_IDS \
	CK_SKS_ID(CKO_SECRET_KEY,		SKS_CKO_SECRET_KEY) \
	CK_SKS_ID(CKO_PUBLIC_KEY,		SKS_CKO_PUBLIC_KEY) \
	CK_SKS_ID(CKO_PRIVATE_KEY,		SKS_CKO_PRIVATE_KEY) \
	CK_SKS_ID(CKO_OTP_KEY,			SKS_CKO_OTP_KEY) \
	CK_SKS_ID(CKO_CERTIFICATE,		SKS_CKO_CERTIFICATE) \
	CK_SKS_ID(CKO_DATA,			SKS_CKO_DATA) \
	CK_SKS_ID(CKO_DOMAIN_PARAMETERS,	SKS_CKO_DOMAIN_PARAMETERS) \
	CK_SKS_ID(CKO_HW_FEATURE,		SKS_CKO_HW_FEATURE) \
	CK_SKS_ID(CKO_MECHANISM,		SKS_CKO_MECHANISM) \
	CK_SKS_ID(CK_VENDOR_INVALID_ID,		SKS_UNDEFINED_ID)

#define CK_SKS_KEY_TYPE_IDS \
	CK_SKS_ID(CKK_AES,			SKS_CKK_AES) \
	CK_SKS_ID(CKK_GENERIC_SECRET,		SKS_CKK_GENERIC_SECRET) \
	CK_SKS_ID(CKK_MD5_HMAC,			SKS_CKK_MD5_HMAC) \
	CK_SKS_ID(CKK_SHA_1_HMAC,		SKS_CKK_SHA_1_HMAC) \
	CK_SKS_ID(CKK_SHA224_HMAC,		SKS_CKK_SHA224_HMAC) \
	CK_SKS_ID(CKK_SHA256_HMAC,		SKS_CKK_SHA256_HMAC) \
	CK_SKS_ID(CKK_SHA384_HMAC,		SKS_CKK_SHA384_HMAC) \
	CK_SKS_ID(CKK_SHA512_HMAC,		SKS_CKK_SHA512_HMAC) \
	CK_SKS_ID(CK_VENDOR_INVALID_ID,		SKS_UNDEFINED_ID)

/*
 * Convert structure struct sks_token_info retreived from TA into a
 * cryptoki API compliant CK_TOKEN_INFO structure.
 *
 * struct sks_token_info is defined in the SKS TA API.
 */
CK_RV sks2ck_token_info(CK_TOKEN_INFO_PTR ck_info,
			struct sks_token_info *sks_info);
CK_RV sks2ck_slot_info(CK_SLOT_INFO_PTR ck_info,
			struct sks_slot_info *sks_info);

/*
 * Convert IDs between SKS and Cryptoki.
 */
CK_RV sks2ck_mechanism_type(CK_MECHANISM_TYPE *ck, uint32_t sks);
uint32_t ck2sks_mechanism_type(CK_MECHANISM_TYPE ck);

CK_RV sks2ck_attribute_id(CK_ULONG *ck, uint32_t sks);
uint32_t ck2sks_attribute_id(CK_ULONG ck);

CK_RV sks2ck_token_flag(CK_FLAGS *ck, uint32_t sks);
uint32_t ck2sks_token_flag(CK_FLAGS ck);

CK_RV sks2ck_mechanism_type_list(CK_MECHANISM_TYPE *dst, void *sks,
				 size_t count);
CK_RV sks2ck_mechanism_flag(CK_FLAGS *ck, uint32_t sks);
CK_RV sks2ck_mechanism_info(CK_MECHANISM_INFO *info, void *sks);

uint32_t ck2sks_class(CK_ULONG ck);
CK_RV sks2ck_class(CK_ULONG *ck, uint32_t sks);

uint32_t ck2sks_type_in_class(CK_ULONG ck, CK_ULONG class);
CK_RV sks2ck_type_in_class(CK_ULONG *ck, uint32_t sks, CK_ULONG class);

uint32_t ck2sks_key_type(CK_ULONG ck);
CK_RV sks2ck_key_type(CK_ULONG *ck, uint32_t sks);

int sks_attr2boolprop_shift(CK_ULONG attr);

CK_RV sks2ck_rv(uint32_t sks);
CK_RV teec2ck_rv(TEEC_Result res);

/*
 * Helper functions to analyse CK fields
 */
size_t ck_attr_is_class(uint32_t attribute_id);
size_t ck_attr_is_type(uint32_t attribute_id);
int ck_attr2boolprop_shift(CK_ULONG attr);

int sks_object_has_boolprop(uint32_t class);
int sks_class_has_type(uint32_t class);

#endif /*__HELPERS_CK_H*/
